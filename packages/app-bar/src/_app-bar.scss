@use "sass:map";
@use "@react-md/core";

$disable-fixed: false !default;
$disable-primary-theme: false !default;
$disable-secondary-theme: false !default;
$disable-surface-theme: false !default;
$disable-dense-theme: false !default;
$disable-prominent-theme: false !default;
$disable-prominent-dense-theme: false !default;

$disable-title: false !default;

$height: 3.5rem !default;
$dense-height: 3rem !default;
$prominent-height: $height * 2 !default;
$prominent-dense-height: $dense-height * 2 !default;

$fixed-z-index: 10 !default;
$fixed-elevation: 2 !default;
$fixed-positions: top bottom !default;

$light-theme-surface-background-color: core.$light-theme-surface-color !default;
$light-theme-surface-color: core.contrast-color(
  $light-theme-surface-background-color
) !default;
$dark-theme-surface-background-color: if(
  core.$disable-dark-elevation,
  core.$dark-theme-surface-color,
  map.get(core.$dark-elevation-colors, $fixed-elevation)
) !default;
$dark-theme-surface-color: #fff !default;

$surface-background-color: if(
  core.$color-scheme == dark,
  $dark-theme-surface-background-color,
  $light-theme-surface-background-color
) !default;
$surface-color: if(
  core.$color-scheme == dark,
  $dark-theme-surface-color,
  $light-theme-surface-color
) !default;

$horizontal-padding: 0.25rem !default;
$vertical-padding: 0 !default;

$keyline: 1rem !default;
$title-keyline: 4.5rem !default;

$var-lookup: (
  height: (
    var: --rmd-app-bar-height,
    value: $height,
  ),
  background-color: (
    var: --rmd-app-bar-background-color,
    value: null,
  ),
  color: (
    var: --rmd-app-bar-color,
    value: core.get-theme-var(text-primary-color),
  ),
  surface-background-color: (
    var: --rmd-app-bar-surface-background-color,
    value: $surface-background-color,
  ),
  surface-color: (
    var: --rmd-app-bar-surface-color,
    value: $surface-color,
  ),
);

@function get-var($name, $fallback: null) {
  $found: core.validate($var-lookup, $name, "app-bar var");
  $var: map.get($found, var);
  $value: if($fallback, $fallback, map.get($found, value));

  @if $value {
    @return var(#{$var}, #{$value});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  $var: map.get(core.validate($var-lookup, $name, "app-bar var"), var);

  #{$var}: #{$value};
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin use-light-theme {
  @include set-var(
    surface-background-color,
    $light-theme-surface-background-color
  );
  @include set-var(surface-color, $light-theme-surface-color);
}

@mixin use-dark-theme {
  @include set-var(
    surface-background-color,
    $dark-theme-surface-background-color
  );
  @include set-var(surface-color, $dark-theme-surface-color);
}

@mixin dense {
  @include set-var(height, $dense-height);
}

@mixin styles {
  .rmd-app-bar {
    @include use-var(background-color);
    @include use-var(color);
    @include use-var(height);

    align-items: center;
    display: flex;
    // since app bars can appear a lot in full page dialogs, setting these flex
    // values allows it be be a direct replacement of the `DialogHeader`
    // component without all the offsets and additional styles needed for fixed
    // app bars.
    flex: 0 0 auto;
    padding: $vertical-padding $horizontal-padding;
    width: 100%;

    &--scrollbar-offset {
      @include core.rtl {
        margin-right: calc(-1 * #{core.scrollbar-size()});
      }

      padding-right: calc(#{$horizontal-padding} + #{core.scrollbar-size()});
      width: calc(100% + core.scrollbar-size());
    }

    @if not $disable-fixed {
      &--fixed {
        left: 0;
        position: fixed;
        z-index: $fixed-z-index;
      }

      @if $fixed-elevation and $fixed-elevation != 0 {
        &--fixed-elevation {
          @include core.box-shadow($fixed-elevation);
        }
      }

      @each $position in $fixed-positions {
        &--#{$position} {
          #{$position}: 0;
        }
      }
    }

    &--auto {
      @include set-var(height, auto);
    }

    @if not $disable-dense-theme {
      &--dense {
        @include set-var(height, $dense-height);
      }
    }

    @if not $disable-prominent-theme {
      &--prominent {
        @include set-var(height, $prominent-height);
      }
    }

    @if not $disable-prominent-dense-theme {
      &--prominent-dense {
        @include set-var(height, $prominent-dense-height);
      }
    }

    @if not $disable-primary-theme {
      &--primary {
        @include set-var(background-color, core.get-theme-var(primary-color));
        @include set-var(color, core.get-theme-var(on-primary-color));
      }
    }

    @if not $disable-secondary-theme {
      &--secondary {
        @include set-var(background-color, core.get-theme-var(secondary-color));
        @include set-var(color, core.get-theme-var(on-secondary-color));
      }
    }

    @if not $disable-surface-theme {
      &--surface {
        @include set-var(background-color, get-var(surface-background-color));
        @include set-var(color, get-var(surface-color));
      }
    }

    @if not $disable-title {
      &__title {
        @include core.auto-rtl(margin-left, $keyline - $horizontal-padding);

        flex: 1 1 auto;
        margin-bottom: 0;
        margin-top: 0;

        &--keyline {
          @include core.auto-rtl(
            margin-left,
            $title-keyline - $horizontal-padding
          );
        }

        &--nav-keyline {
          @include core.auto-rtl(
            margin-left,
            $title-keyline - $horizontal-padding - 3rem
          );
        }

        &--no-wrap {
          @include core.text-overflow;
        }
      }
    }
  }

  @if core.$color-scheme == system {
    @media (prefers-color-scheme: dark) {
      :root {
        @include use-dark-theme;
      }
    }
  }
}
