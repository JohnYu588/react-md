@use "sass:list";
@use "sass:map";
@use "@react-md/core";
@use "@react-md/icon";
@use "@react-md/progress";

$disable-text: false !default;
$disable-icon: false !default;
$disable-outline: false !default;
$disable-contained: false !default;
$disable-contained-pressed-elevation: false !default;
$disable-floating: false !default;
$disable-floating-absolute-position: false !default;
$disable-circular-progress: progress.$disable-circular !default;

$themes: primary secondary warning error disabled !default;

$text-border-radius: 0.5rem !default;
$text-horizontal-padding: 1rem !default;
$text-vertical-padding: 0 !default;
$text-min-height: 2.25rem !default;
$text-min-width: 4rem !default;
$text-icon-size: 1.125rem !default;

$icon-border-radius: 50% !default;
$icon-size: 3rem !default;

$outline-width: 1px !default;

$clear-color: core.get-theme-var(text-primary-color) !default;
$clear-outline-color: #999 !default;

$contained-elevation: 2 !default;
$contained-pressed-elevation: 4 !default;
$clear-contained-background-color: core.$light-theme-surface-color !default;
$clear-contained-color: core.contrast-color(
  $clear-contained-background-color
) !default;

$circular-progress-size: icon.get-var(size) !default;

$floating-margin: 1.5rem !default;
$floating-z-index: core.$temporary-element-z-index !default;
$floating-positions: (
  tl: (
    left: $floating-margin,
    top: $floating-margin,
  ),
  tr: (
    right: $floating-margin,
    top: $floating-margin,
  ),
  bl: (
    bottom: $floating-margin,
    left: $floating-margin,
  ),
  br: (
    bottom: $floating-margin,
    right: $floating-margin,
  ),
) !default;

$var-lookup: (
  background-color: (
    var: --rmd-button-background-color,
    value: transparent,
  ),
  color: (
    var: --rmd-button-color,
    value: null,
  ),
  border-radius: (
    var: --rmd-button-border-radius,
    value: null,
  ),
  outline-color: (
    var: --rmd-button-outline-color,
    value: $clear-outline-color,
  ),
  contained-background-color: (
    var: --rmd-button-contained-background-color,
    value: $clear-contained-background-color,
  ),
  contained-color: (
    var: --rmd-button-contained-color,
    value: $clear-contained-color,
  ),
  text-horizontal-padding: (
    var: --rmd-button-text-horizontal-padding,
    value: $text-horizontal-padding,
  ),
  text-vertical-padding: (
    var: --rmd-button-text-vertical-padding,
    value: $text-vertical-padding,
  ),
  text-min-height: (
    var: --rmd-button-text-min-height,
    value: $text-min-height,
  ),
  text-min-width: (
    var: --rmd-button-text-min-width,
    value: $text-min-width,
  ),
  icon-size: (
    var: --rmd-button-icon-size,
    value: $icon-size,
  ),
);

@function get-var($name, $fallback: null) {
  $found: core.validate($var-lookup, $name, "button var");
  $var: map.get($found, var);
  $value: if($fallback, $fallback, map.get($found, value));

  @if $value {
    @return var(#{$var}, #{$value});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  $var: map.get(core.validate($var-lookup, $name, "button var"), var);

  #{$var}: #{$value};
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin use-light-theme {
  @include set-var(
    surface-background-color,
    $light-theme-surface-background-color
  );
  @include set-var(surface-color, $light-theme-surface-color);
}

@mixin _theme($theme-name, $theme-color, $on-theme) {
  @if list.index($themes, $theme-name) {
    @if not $disable-contained {
      &--#{$theme-name} {
        @include set-var(background-color, $theme-color);
        @include set-var(color, $on-theme);
      }
    }

    &--text-#{$theme-name} {
      @include set-var(color, $theme-color);
      @if not $disable-outline {
        @include set-var(outline-color, $theme-color);
      }
    }
  }
}

@mixin styles {
  .rmd-button {
    @if not $disable-circular-progress {
      @include progress.set-var(circular-size, $circular-progress-size);
    }

    @include core.interaction-surface(
      $disabled-selector: "&:disabled" +
        if(list.index($themes, disabled), ",&[aria-disabled='true']", "")
    );
    @include icon.set-var(color, currentcolor);
    @include icon.use-var(gap, spacing);
    @include use-var(background-color);
    @include use-var(color);
    @include use-var(border-radius);

    align-items: center;
    border-width: 0;
    display: inline-flex;
    flex-shrink: 0;
    justify-content: center;

    @if not $disable-text {
      &--text {
        @include icon.set-var(size, $text-icon-size);
        @include set-var(border-radius, $text-border-radius);
        @include core.map-to-styles(core.$button-styles);
        @include use-var(min-height, text-min-height);
        @include use-var(min-width, text-min-width);

        border: 0;
        padding: get-var(text-vertical-padding)
          get-var(text-horizontal-padding);
      }
    }

    @if not $disable-icon {
      &--icon {
        @include set-var(border-radius, $icon-border-radius);
        @include use-var(height, icon-size);
        @include use-var(width, icon-size);

        padding: 0;
      }
    }

    @if not $disable-outline {
      &--outline {
        box-shadow: inset 0 0 0 $outline-width get-var(outline-color);
      }
    }

    @if not $disable-contained {
      &--contained {
        @include core.elevation-transition(
          $contained-elevation,
          if(
            $disable-contained-pressed-elevation,
            null,
            $contained-pressed-elevation
          ),
          "&.rmd-button--pressed",
          $pseudo-before: false
        );

        @include set-var(background-color, get-var(contained-background-color));
        @include set-var(color, get-var(contained-color));
      }
    }

    @include _theme(
      primary,
      core.get-theme-var(primary-color),
      core.get-theme-var(on-primary-color)
    );
    @include _theme(
      secondary,
      core.get-theme-var(secondary-color),
      core.get-theme-var(on-secondary-color)
    );
    @include _theme(
      warning,
      core.get-theme-var(warning-color),
      core.get-theme-var(on-warning-color)
    );
    @include _theme(
      error,
      core.get-theme-var(error-color),
      core.get-theme-var(on-error-color)
    );

    @if list.index($themes, disabled) {
      &--disabled {
        @include core.use-theme-var(color, text-disabled-color);
        @include set-var(
          outline-color,
          core.get-theme-var(text-disabled-color)
        );
      }
    }
  }

  @if not $disable-floating {
    .rmd-fab {
      position: fixed;
      z-index: $floating-z-index;

      @if not $disable-floating-absolute-position {
        &--absolute {
          position: absolute;
        }
      }

      @each $suffix, $styles in $floating-positions {
        &--#{$suffix} {
          @each $property, $value in $styles {
            @if $property == left {
              @include core.rtl {
                left: auto;
                right: calc(#{$value} + #{core.scrollbar-size()});
              }

              left: $value;
            } @else if $property == right {
              @include core.rtl {
                left: $value;
                right: auto;
              }

              right: calc(#{$value} + #{core.scrollbar-size()});
            } @else {
              #{$property}: #{$value};
            }
          }
        }
      }
    }
  }
}
