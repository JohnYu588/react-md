@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:string";
@use "colors";
@use "a11y";

@use "../utils";

/// This defines the total color scheme for your app and can be either:
/// - `light`
/// - `dark`
/// - `system`
///
/// Setting this value to `system` will default to a light theme unless the user
/// has set their preferred color scheme to dark on their OS.
///
/// If this value is changed from the default `light` value, the
/// `colorSchemeMode` on the `CoreProviders` component should be updated to
/// match the new value.
$color-scheme: light !default;

/// The dark elevation feature is generally recommended to keep enabled since it
/// helps with visibility when your app is using the dark color scheme either
/// through `$color-scheme: dark` or `using the `use-dark-theme mixin. When this
/// feature is enabled, the `background-color` for surfaces will gradually
/// become lighter the higher their `z-value` is with the material design box
/// shadows.
///
/// If this is set to `false`, all surfaces will mimic the light theme and have
/// a single surface color.
$disable-dark-elevation: false !default;

/// This value should be set to `false` if you do not want the initial bundle to
/// include the `@media (prefers-color-scheme: dark)` styles.
$disable-default-system-theme: false !default;

$primary-color: colors.$blue-500 !default;
$on-primary-color: a11y.contrast-color($primary-color) !default;
$secondary-color: colors.$orange-a-400 !default;
$on-secondary-color: a11y.contrast-color($secondary-color) !default;
$warning-color: colors.$deep-orange-a-400 !default;
$on-warning-color: a11y.contrast-color($warning-color) !default;
$error-color: colors.$red-500 !default;
$on-error-color: a11y.contrast-color($error-color) !default;
$success-color: colors.$green-a-700 !default;
$on-success-color: a11y.contrast-color($success-color) !default;

$light-theme-background-color: #fafafa !default;
$light-theme-surface-color: #fff !default;
$light-theme-text-primary-color: color.adjust(#000, $lightness: 13%) !default;
$light-theme-text-secondary-color: color.adjust(#000, $lightness: 46%) !default;
$light-theme-text-hint-color: color.adjust(#000, $lightness: 66%) !default;
$light-theme-text-disabled-color: color.adjust(#000, $lightness: 62%) !default;

$dark-theme-background-color: #121212 !default;
$dark-theme-surface-color: if($disable-dark-elevation, #424242, null) !default;
$dark-theme-text-primary-color: color.adjust(#fff, $lightness: -15%) !default;
$dark-theme-text-secondary-color: color.adjust(#fff, $lightness: -30%) !default;
$dark-theme-text-hint-color: color.adjust(#fff, $lightness: -50%) !default;
$dark-theme-text-disabled-color: color.adjust(#fff, $lightness: -50%) !default;

$background-color: if(
  $color-scheme == dark,
  $dark-theme-background-color,
  $light-theme-background-color
) !default;
$surface-color: if(
  $color-scheme == dark,
  $dark-theme-surface-color,
  $light-theme-surface-color
) !default;
$text-primary-color: if(
  $color-scheme == dark,
  $dark-theme-text-primary-color,
  $light-theme-text-primary-color
) !default;
$text-secondary-color: if(
  $color-scheme == dark,
  $dark-theme-text-secondary-color,
  $light-theme-text-secondary-color
) !default;
$text-hint-color: if(
  $color-scheme == dark,
  $dark-theme-text-hint-color,
  $light-theme-text-hint-color
) !default;
$text-disabled-color: if(
  $color-scheme == dark,
  $dark-theme-text-disabled-color,
  $light-theme-text-disabled-color
) !default;

$dark-elevation-colors: (
  0: $dark-theme-background-color,
  1: #1f1f1f,
  2: #242424,
  3: #262626,
  4: #282828,
  5: #282828,
  6: #2c2c2c,
  7: #2c2c2c,
  8: #2f2f2f,
  9: #2f2f2f,
  10: #2f2f2f,
  11: #2f2f2f,
  12: #333,
  13: #333,
  14: #333,
  15: #333,
  16: #353535,
  17: #353535,
  18: #353535,
  19: #353535,
  20: #353535,
  21: #353535,
  22: #353535,
  23: #353535,
  24: #383838,
) !default;

$theme-var-lookup: (
  background-color: (
    var: --rmd-background-color,
    value: $background-color,
  ),
  surface-color: (
    var: --rmd-surface-color,
    value: $surface-color,
  ),
  primary-color: (
    var: --rmd-primary-color,
    value: $primary-color,
  ),
  on-primary-color: (
    var: --rmd-on-primary-color,
    value: $on-primary-color,
  ),
  secondary-color: (
    var: --rmd-secondary-color,
    value: $secondary-color,
  ),
  on-secondary-color: (
    var: --rmd-on-secondary-color,
    value: $on-secondary-color,
  ),
  warning-color: (
    var: --rmd-warning-color,
    value: $warning-color,
  ),
  on-warning-color: (
    var: --rmd-on-warning-color,
    value: $on-warning-color,
  ),
  error-color: (
    var: --rmd-error-color,
    value: $error-color,
  ),
  on-error-color: (
    var: --rmd-on-error-color,
    value: $on-error-color,
  ),
  success-color: (
    var: --rmd-success-color,
    value: $success-color,
  ),
  on-success-color: (
    var: --rmd-on-success-color,
    value: $on-success-color,
  ),
  text-primary-color: (
    var: --rmd-text-primary-color,
    value: $text-primary-color,
  ),
  text-secondary-color: (
    var: --rmd-text-secondary-color,
    value: $text-secondary-color,
  ),
  text-hint-color: (
    var: --rmd-text-hint-color,
    value: $text-hint-color,
  ),
  text-disabled-color: (
    var: --rmd-text-disabled-color,
    value: $text-disabled-color,
  ),
);

@function get-theme-var($name, $fallback: null) {
  $found: utils.validate($theme-var-lookup, $name, "theme var");
  $var: map.get($found, var);
  $value: if($fallback, $fallback, map.get($found, value));

  @if $value {
    @return var(#{$var}, #{$value});
  }

  @return var(#{$var});
}

@function _dark-elevation-color($z-value) {
  @return "--rmd-dark-elevation-color-#{$z-value}";
}

@function get-dark-elevation-color($z-value) {
  @return var(#{_dark-elevation-color($z-value)});
}

@mixin set-dark-elevation-color($z-value, $value) {
  #{_dark-elevation-color($z-value)}: #{$value};
}

@mixin set-theme-var($name, $value) {
  $var: map.get(utils.validate($theme-var-lookup, $name, "theme var"), var);

  #{$var}: #{$value};
}

@mixin use-theme-var($property, $name: $property, $fallback: null) {
  #{$property}: get-theme-var($name, $fallback);
}

@if $color-scheme != light and $color-scheme != dark and $color-scheme != system
{
  @error "$color-scheme must be one of: light, dark, or system but was #{$color-scheme}";
}

@mixin use-light-theme {
  @include set-theme-var(background-color, $light-theme-background-color);
  @if $disable-dark-elevation {
    @include set-theme-var(surface-color, $light-theme-surface-color);
  }
  @include set-theme-var(text-primary-color, $light-theme-text-primary-color);
  @include set-theme-var(
    text-secondary-color,
    $light-theme-text-secondary-color
  );
  @include set-theme-var(text-hint-color, $light-theme-text-hint-color);
  @include set-theme-var(text-disabled-color, $light-theme-text-disabled-color);

  @if not $disable-dark-elevation and $color-scheme != light {
    @each $z-value, $background-color in $dark-elevation-colors {
      @include set-dark-elevation-color($z-value, $light-theme-surface-color);
    }
  }
}

@mixin use-dark-theme {
  @include set-theme-var(background-color, $dark-theme-background-color);
  @if $disable-dark-elevation {
    @include set-theme-var(surface-color, $dark-theme-surface-color);
  }
  @include set-theme-var(text-primary-color, $dark-theme-text-primary-color);
  @include set-theme-var(
    text-secondary-color,
    $dark-theme-text-secondary-color
  );
  @include set-theme-var(text-hint-color, $dark-theme-text-hint-color);
  @include set-theme-var(text-disabled-color, $dark-theme-text-disabled-color);

  @if not $disable-dark-elevation {
    @each $z-value, $background-color in $dark-elevation-colors {
      @include set-dark-elevation-color($z-value, $background-color);
    }
  }
}

@mixin colors {
  @include set-theme-var(background-color, $background-color);
  @if $disable-dark-elevation {
    @include set-theme-var(surface-color, $surface-color);
  }

  @include set-theme-var(primary-color, $primary-color);
  @include set-theme-var(on-primary-color, $on-primary-color);
  @include set-theme-var(secondary-color, $secondary-color);
  @include set-theme-var(on-secondary-color, $on-secondary-color);
  @include set-theme-var(warning-color, $warning-color);
  @include set-theme-var(on-warning-color, $on-warning-color);
  @include set-theme-var(error-color, $error-color);
  @include set-theme-var(on-error-color, $on-error-color);
  @include set-theme-var(success-color, $success-color);
  @include set-theme-var(on-success-color, $on-success-color);
  @include set-theme-var(text-primary-color, $text-primary-color);
  @include set-theme-var(text-secondary-color, $text-secondary-color);
  @include set-theme-var(text-hint-color, $text-hint-color);
  @include set-theme-var(text-disabled-color, $text-disabled-color);

  @if not $disable-dark-elevation and $color-scheme == dark {
    @each $z-value, $background-color in $dark-elevation-colors {
      @include set-dark-elevation-color($z-value, $background-color);
    }
  }
}

@mixin create-surface($z-value, $disable-colors: $disable-dark-elevation) {
  @if not $disable-dark-elevation {
    @include set-theme-var(surface-color, get-dark-elevation-color($z-value));
  }
  @if not $disable-colors {
    @include set-theme-var(background-color, get-theme-var(surface-color));
    @include use-theme-var(background-color);
    @include use-theme-var(color, text-primary-color);
  }
}

@function get-swatch(
  $color,
  $swatch,
  $accent: false,
  $fallback-color: null,
  $fallback-name: null
) {
  $current-color-index: list.index(map.values(colors.$color-map), $color);

  @if not $current-color-index {
    @if not $fallback-color {
      $fallback: if(
        $fallback-name,
        "the '$#{$fallback-name}' variable",
        "a fallback color"
      );

      $error-msg: "Invalid material design color: '#{$color}'. If this was intentional because your app does " +
        "not use material design colors, set #{$fallback} instead to get a correct color for the provided swatch: " +
        "#{$swatch}.";
      @error $error-msg;
    } @else if type-of($fallback-color) != "color" {
      @error "Invalid fallback color: '#{$fallback-color}'. This must be a valid color.";
    }
  }

  $suffixes: utils.validate(
    if($accent, colors.$accent-suffixes, colors.$primary-suffixes),
    $swatch,
    "material design color swatch"
  );
  $current-color-name: list.nth(
    map.keys(colors.$color-map),
    $current-color-index
  );
  $accent-index: string.index($current-color-name, "-a-");
  @if $accent-index {
    $current-color-name: string.slice(
      $current-color-name,
      1,
      $accent-index - 1
    );
  } @else {
    $index: 1;
    $found: false;
    @while not $found and $index < length(colors.$available-color-names) {
      $suffix: list.nth(colors.$available-color-names, $index);
      $suffix-index: string.index($current-color-name, $suffix);
      @if $suffix-index {
        $found: true;
        $current-color-name: string.slice(
          $current-color-name,
          1,
          $suffix-index - 1 + string.length($suffix)
        );
      }

      $index: $index + 1;
    }
  }

  $color-name: "#{$current-color-name}#{if($accent, "-a", "")}-#{$swatch}";

  @return map-get(colors.$color-map, $color-name);
}

@mixin default-system-theme {
  @if not $disable-default-system-theme and $color-scheme == system {
    @media (prefers-color-scheme: dark) {
      :root {
        @content;
      }
    }
  }
}
