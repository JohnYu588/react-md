@use "sass:string";
@use "sass:map";
@use "sass:meta";
@use "sass:list";

$disable-rtl: false !default;
$disable-validation: false !default;

$_swappable-positions: top right bottom left;
$_swappable-position-prefixes: border margin padding;

/// Replace `$search` with `$replace` in `$string`
///
/// @author Hugo Giraudel
/// @access private
/// @param {String} string - Initial string
/// @param {String} search - Substring to replace
/// @param {String} replace - New value
/// @return {String} - Updated string
/// @link https://css-tricks.com/snippets/sass/str-replace-function Source from CSS Tricks
@function str-replace($string, $search, $replace) {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

@function validate($list-or-map, $key-or-value, $error-message) {
  $type: meta.type-of($list-or-map);
  $is-map: $type == map;
  $is-list: $type == list;

  @if $disable-validation {
    @return if($is-list, $key-or-value, map-get($list-or-map, $key-or-value));
  }

  @if not $is-map and not $is-list {
    @error 'Unable to validate anything except for lists and maps at this time. Received: #{$list-or-map}.';
  }

  $choices: if($is-map, map.keys($list-or-map), $list-or-map);
  @if not index($choices, $key-or-value) {
    @error "Invalid #{$error-message}: '#{$key-or-value}'. Choose one of: #{$choices}";
  }

  @return if($is-list, $key-or-value, map-get($list-or-map, $key-or-value));
}

@mixin map-to-styles($map) {
  @each $property, $value in $map {
    #{$property}: $value;
  }
}

@mixin map-to-animation($map) {
  @each $percentage, $styles in $map {
    #{$percentage} {
      @include map-to-styles($styles);
    }
  }
}

@mixin pseudo-element($z-index: 0, $fixed: false) {
  border-radius: inherit;
  content: "";
  inset: 0;
  pointer-events: none;
  position: if($fixed, fixed, absolute);
  z-index: $z-index;
}

@mixin _sr-only-focusable {
  &:active,
  &:focus {
    clip: auto;
    clip-path: none;
    height: auto;
    margin: auto;
    overflow: visible;
    white-space: normal;
    width: auto;
  }
}

@mixin sr-only($focusable: false, $focus-selector: "&--focusable") {
  border: 0;
  clip: rect(1px, 1px, 1px, 1px);
  clip-path: inset(50%);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  white-space: nowrap;
  width: 1px;

  @if $focusable {
    @if not $focus-selector {
      @include _sr-only-focusable;
    } @else {
      #{$focus-selector} {
        @include _sr-only-focusable;
      }
    }
  }
}

@mixin hide-scrollbar {
  scrollbar-width: none;

  &::-webkit-scrollbar {
    height: 0;
    width: 0;
  }
}

@mixin optional-css-modules(
  $class-name,
  $css-modules: false,
  $parent-selector: true
) {
  $selector: if($css-modules, ":global #{$class-name} :local", $class-name);
  $selector: if($parent-selector, "#{$selector} &", $selector);

  #{$selector} {
    @content;
  }
}

@mixin rtl {
  @if not $disable-rtl {
    [dir="rtl"] & {
      @content;
    }
  }
}

@function _swap-position($style) {
  $prefix: "";
  $position: $style;
  @each $valid-prefix in $_swappable-position-prefixes {
    @if string.index($style, "#{$valid-prefix}-") {
      $prefix: "#{$valid-prefix}-";
      $position: str-replace($style, $prefix, "");
    }
  }

  @if not list.index($_swappable-positions, $position) {
    @error "Invalid swappable position: '#{$position}'. Choose one of #{$_swappable-positions}";
  }

  $next-position: bottom;
  @if $position == left {
    $next-position: right;
  } @else if $position == right {
    $next-position: left;
  } @else if $position == bottom {
    $next-position: top;
  }

  @return "#{$prefix}#{$next-position}";
}

@mixin auto-rtl-group($styles, $swapped-styles: ()) {
  @include map-to-styles($styles);
  @include rtl {
    @each $property, $value in $styles {
      $inversed-property: _swap-position($property);
      $inversed-value: auto;
      @if map.has-key($swapped-styles, $property) {
        $inversed-value: map.get($swapped-styles, $property);
      } @else if map.has-key($styles, $inversed-property) {
        $inversed-value: map.get($swapped-styles, $inversed-property);
      }

      #{$property}: #{$inversed-value};
      #{$inversed-property}: #{$value};

      @content;
    }
  }
}

@mixin auto-rtl($property, $value, $swapped-value: null) {
  $inversed-property: _swap-position($property);
  @include rtl {
    @if $swapped-value == null {
      $swapped-value: auto;

      @each $prefix in $_swappable-position-prefixes {
        @if string.index($property, "#{$prefix}-") {
          $swapped-value: 0;
        }
      }
    }

    #{$property}: #{$swapped-value};
    #{$inversed-property}: #{$value};
    @content;
  }

  #{$property}: #{$value};
}

@function scrollbar-size() {
  @return var(--rmd-scrollbar-size, 0px);
}
