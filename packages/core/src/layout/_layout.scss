@use "sass:map";
@use "../utils";
@use "../media-queries/media-queries";
@use "../app-bar/app-bar";
@use "../icon/icon";
@use "../interaction/interaction";
@use "../list/list";
@use "../sheet/sheet";
@use "../theme/colors";
@use "../transition/transition";
@use "../typography/typography";
@use "../window-splitter/window-splitter";

$disable-everything: false !default;
$disable-resizable: false !default;
$disable-full-height-navigation: false !default;

$main-focus-z-index: 999 !default;

$header-height: app-bar.$height !default;

$navigation-z-index: app-bar.$fixed-z-index !default;
$navigation-static-width: sheet.$static-width !default;
$navigation-container-name: nav !default;

$navigation-breakpoint: tablet !default;

$enter-duration: sheet.$enter-duration !default;
$enter-timing-function: sheet.$enter-timing-function !default;
$leave-duration: sheet.$leave-duration !default;
$leave-timing-function: sheet.$leave-timing-function !default;

$variables: (size, header-height);

@function get-var($name, $fallback: null) {
  $var: utils.get-var-name($variables, $name, "layout");
  @if $fallback {
    @return var(#{$var}, #{$fallback});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  @if $value {
    #{utils.get-var-name($variables, $name, "layout")}: #{$value};
  }
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin variables {
  @if not $disable-everything {
    @include set-var(size, $navigation-static-width);
    @include set-var(header-height, $header-height);
  }
}

@mixin styles($disable-layer: false) {
  @if not $disable-everything {
    @include utils.optional-layer(layout, $disable-layer) {
      .rmd-layout-main {
        display: block;
        outline: none;

        &::before {
          @include utils.pseudo-element(
            $fixed: true,
            $z-index: $main-focus-z-index,
            $inset: get-var(header-height) 0 interaction.get-var(focus-width)
          );
          @include interaction.focus-styles($box-shadow: true);

          opacity: 0;
          transition: opacity transition.$linear-duration
            transition.$linear-timing-function;
        }

        &:focus::before {
          opacity: 1;
        }

        &--offset-v {
          @include use-var(padding-top, header-height);
        }
      }

      /// I decided to go with an "SSR-first" approach by having the nav element
      /// always be rendered, but use media queries to show it for tablets and
      /// above. This makes it so there is less javascript to dynamically switch
      /// between layout types as you resize the browser.
      .rmd-layout-nav {
        @include sheet.set-var(width, get-var(size));
        @include media-queries.media($navigation-breakpoint) {
          // Why did I want grid? flex seems easier atm
          // use grid so that you can easily have a header + tree that fills the remaining space
          display: flex;
          flex-direction: column;
        }

        container: $navigation-container-name;
        display: none;
        z-index: $navigation-z-index;

        &--offset-v {
          @include use-var(top, header-height);
        }
      }

      @if not $disable-full-height-navigation {
        .rmd-layout-nav-toggle {
          @include media-queries.media($navigation-breakpoint) {
            display: none;
          }
        }
      }

      /// This class is used to transition when the nav expands/collapses on
      /// larger screen sizes
      .rmd-layout-h {
        will-change: margin;

        &--active {
          @include media-queries.media($navigation-breakpoint) {
            @include utils.auto-rtl(margin-left, get-var(size));

            &::before {
              @include utils.auto-rtl(left, get-var(size));
            }
          }
        }

        &--enter {
          transition: margin $enter-duration $enter-timing-function;
        }

        &--exit {
          transition: margin $leave-duration $leave-timing-function;
        }
      }

      @if not $disable-resizable {
        .rmd-layout-splitter {
          @include window-splitter.set-var(position, get-var(size));

          &--offset-v {
            @include window-splitter.set-var(top, get-var(header-height));
          }

          &--responsive {
            @include media-queries.media($navigation-breakpoint) {
              display: inline-block;
            }

            display: none;
          }
        }
      }
    }
  }
}
