@use "sass:map";
@use "../utils";
@use "../media-queries/media-queries";
@use "../app-bar/app-bar";
@use "../icon/icon";
@use "../interaction/interaction";
@use "../list/list";
@use "../sheet/sheet";
@use "../theme/colors";
@use "../transition/transition";
@use "../typography/typography";
@use "../window-splitter/window-splitter";

$disable-everything: false !default;
$disable-resizable: false !default;

$main-focus-z-index: 999 !default;

$header-height: app-bar.$height !default;

$navigation-z-index: app-bar.$fixed-z-index !default;
$navigation-static-width: sheet.$static-width !default;
$navigation-container-name: nav !default;

$navigation-breakpoint: tablet !default;

$enter-duration: sheet.$enter-duration !default;
$enter-timing-function: sheet.$enter-timing-function !default;
$leave-duration: sheet.$leave-duration !default;
$leave-timing-function: sheet.$leave-timing-function !default;

$var-lookup: (
  size: (
    var: --rmd-layout-size,
    value: $navigation-static-width,
  ),
  header-height: (
    var: --rmd-layout-header-height,
    value: $header-height,
  ),
);

@function get-var($name, $fallback: null) {
  $found: utils.validate($var-lookup, $name, "layout var");
  $var: map.get($found, var);
  $value: if($fallback, $fallback, map.get($found, value));

  @if $value {
    @return var(#{$var}, #{$value});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  $var: map.get(utils.validate($var-lookup, $name, "layout var"), var);

  #{$var}: #{$value};
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin styles {
  @if not $disable-everything {
    .rmd-layout-main {
      display: block;
      outline: none;

      &::before {
        @include utils.pseudo-element(
          $fixed: true,
          $z-index: $main-focus-z-index,
          $inset: get-var(header-height) 0 interaction.get-var(focus-width)
        );
        @include interaction.focus-styles($box-shadow: true);

        opacity: 0;
        transition: opacity
          transition.$linear-duration
          transition.$linear-timing-function;
      }

      &:focus::before {
        opacity: 1;
      }

      &--offset-v {
        @include use-var(padding-top, header-height);
      }
    }

    /// I decided to go with an "SSR-first" approach by having the nav element
    /// always be rendered, but use media queries to show it for tablets and
    /// above. This makes it so there is less javascript to dynamically switch
    /// between layout types as you resize the browser.
    .rmd-layout-nav {
      @include sheet.set-var(width, get-var(size));
      @include media-queries.media($navigation-breakpoint) {
        // use grid so that you can easily have a header + tree that fills the remaining space
        display: grid;
      }

      container: $navigation-container-name;
      display: none;
      z-index: $navigation-z-index;

      &--offset-v {
        @include use-var(top, header-height);
      }
    }

    /// This class is used to transition when the nav expands/collapses on
    /// larger screen sizes
    .rmd-layout-h {
      will-change: margin;

      &--active {
        @include media-queries.media($navigation-breakpoint) {
          @include utils.auto-rtl(margin-left, get-var(size));

          &::before {
            @include utils.auto-rtl(left, get-var(size));
          }
        }
      }

      &--enter {
        transition: margin $enter-duration $enter-timing-function;
      }

      &--exit {
        transition: margin $leave-duration $leave-timing-function;
      }
    }

    @if not $disable-resizable {
      .rmd-layout-splitter {
        @include window-splitter.set-var(position, get-var(size));

        &--offset-v {
          @include window-splitter.set-var(top, get-var(header-height));
        }

        &--responsive {
          @include media-queries.media($navigation-breakpoint) {
            display: inline-block;
          }

          display: none;
        }
      }
    }
  }
}
