@use "sass:map";
@use "sass:list";
@use "../utils";
@use "../theme/colors";
@use "../theme/theme";
@use "../transition/transition";

/// ripple | press | both | null
$mode: ripple !default;
$disable-focus-background: false !default;

$_disable-ripple: not
  list.index(
    (ripple, both),
    utils.validate((ripple, press, both, null), $mode, "interaction mode")
  );

$pressed-class-name: "rmd-pressed";

/// Setting this value to `true` will update the styles for all interactable
/// elements so that the different interaction states no longer cover the other
/// content within the element by applying:
///
/// ```scss
/// > * {
///   z-index: 1;
/// }
/// ```
///
/// This helps improve the legibility of the content since the normal
/// interaction states apply an overlay with some opacity for the different
/// states.
$disable-higher-contrast: false !default;
$light-surface-base-background-color: #000 !default;
$dark-surface-base-background-color: #fff !default;

$focus-color: colors.$blue-500 !default;
$focus-width: 0.125rem !default;
$focus-box-shadow: false !default;

$light-surface-ripple-background-color: rgba(
  $light-surface-base-background-color,
  0.08
) !default;
$dark-surface-ripple-background-color: rgba(
  $dark-surface-base-background-color,
  0.12
) !default;
$ripple-background-color: if(
  theme.$color-scheme == dark,
  $dark-surface-ripple-background-color,
  $light-surface-ripple-background-color
) !default;
$ripple-transform-duration: 0.45s !default;
$ripple-opacity-duration: 0.3s !default;

$light-surface-hover-background-color: rgba(
  $light-surface-base-background-color,
  0.08
) !default;
$light-surface-focus-background-color: rgba(
  $light-surface-base-background-color,
  0.24
) !default;
$light-surface-press-background-color: rgba(
  $light-surface-base-background-color,
  0.32
) !default;
$light-surface-selected-background-color: rgba(
  $light-surface-base-background-color,
  0.16
) !default;
$dark-surface-hover-background-color: rgba(
  $dark-surface-base-background-color,
  0.1
) !default;
$dark-surface-focus-background-color: rgba(
  $dark-surface-base-background-color,
  0.12
) !default;
$dark-surface-press-background-color: rgba(
  $dark-surface-base-background-color,
  0.16
) !default;
$dark-surface-selected-background-color: rgba(
  $dark-surface-base-background-color,
  0.12
) !default;

$hover-background-color: if(
  theme.$color-scheme == dark,
  $dark-surface-hover-background-color,
  $light-surface-hover-background-color
) !default;
$focus-background-color: if(
  theme.$color-scheme == dark,
  $dark-surface-focus-background-color,
  $light-surface-focus-background-color
) !default;
$press-background-color: if(
  theme.$color-scheme == dark,
  $dark-surface-press-background-color,
  $light-surface-press-background-color
) !default;
$selected-background-color: if(
  theme.$color-scheme == dark,
  $dark-surface-selected-background-color,
  $light-surface-selected-background-color
) !default;

$var-lookup: (
  ripple-background-color: (
    var: --rmd-ripple-background-color,
    value: $ripple-background-color,
  ),
  background-color: (
    var: --rmd-interaction-background-color,
    value: null,
  ),
  hover-background-color: (
    var: --rmd-hover-background-color,
    value: $hover-background-color,
  ),
  focus-background-color: (
    var: --rmd-focus-background-color,
    value: $focus-background-color,
  ),
  press-background-color: (
    var: --rmd-press-background-color,
    value: $press-background-color,
  ),
  selected-background-color: (
    var: --rmd-selected-background-color,
    value: $selected-background-color,
  ),
  focus-color: (
    var: --rmd-focus-color,
    value: $focus-color,
  ),
  focus-width: (
    var: --rmd-focus-width,
    value: $focus-width,
  ),
);

@function get-var($name, $fallback: null) {
  $found: utils.validate($var-lookup, $name, "interaction var");
  $var: map.get($found, var);
  $value: if($fallback, $fallback, map.get($found, value));

  @if $value {
    @return var(#{$var}, #{$value});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  $var: map.get(utils.validate($var-lookup, $name, "interaction var"), var);

  #{$var}: #{$value};
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin use-light-surface {
  @include set-var(
    hover-background-color,
    $light-surface-hover-background-color
  );
  @include set-var(
    focus-background-color,
    $light-surface-focus-background-color
  );
  @include set-var(
    press-background-color,
    $light-surface-press-background-color
  );
  @include set-var(
    selected-background-color,
    $light-surface-selected-background-color
  );
  @if not $_disable-ripple {
    @include set-var(
      ripple-background-color,
      $light-surface-ripple-background-color
    );
  }
}

@mixin use-dark-surface {
  @include set-var(
    hover-background-color,
    $dark-surface-hover-background-color
  );
  @include set-var(
    focus-background-color,
    $dark-surface-focus-background-color
  );
  @include set-var(
    press-background-color,
    $dark-surface-press-background-color
  );
  @include set-var(
    selected-background-color,
    $dark-surface-selected-background-color
  );
  @if not $_disable-ripple {
    @include set-var(
      ripple-background-color,
      $dark-surface-ripple-background-color
    );
  }
}

@mixin outline($box-shadow: $focus-box-shadow, $color: transparent) {
  // do not apply box shadow styles here. they will only be applied in the
  // `focus-styles` mixin to minimize bundle size and help with overriding the
  // focus color in specific surfaces
  @if not $box-shadow {
    outline: $color solid get-var(focus-width);
    // adding an focus-offset makes it so it behaves the same way as an inset
    // box shadow
    outline-offset: utils.negate-var(get-var(focus-width));
  }
}

@mixin focus-styles(
  $box-shadow: $focus-box-shadow,
  $disable-background: $disable-focus-background
) {
  @if not $disable-background {
    @include set-var(background-color, get-var(focus-background-color));
  }

  @if $box-shadow {
    box-shadow: inset 0 0 0 get-var(focus-width) get-var(focus-color);
  } @else {
    @include use-var(outline-color, focus-color);
  }
}

@mixin surface(
  $focus-selector: "&:focus",
  $disabled-selector: "&:disabled",
  $clickable: true,
  $hoverable: true,
  $css-modules: false,
  $higher-contrast: true,
  $box-shadow: $focus-box-shadow,
  $disable-background: $disable-focus-background
) {
  @if $clickable {
    cursor: pointer;
  }
  outline: none;
  position: relative;

  @if not $disable-higher-contrast and $higher-contrast {
    > * {
      z-index: 1;
    }
  }

  &::before {
    @include utils.pseudo-element;
    @include outline($box-shadow);
    @if $hoverable {
      @include use-var(background-color);
    }

    transition-duration: transition.$linear-duration;
    transition-property: background-color,
      if($focus-box-shadow, box-shadow, outline-color);
    transition-timing-function: transition.$linear-timing-function;
  }

  @if $focus-selector {
    @include utils.keyboard-only($css-modules) {
      #{$focus-selector + "::before"} {
        @include focus-styles($box-shadow, $disable-background);
      }
    }
  }

  @if $hoverable {
    &:hover::before {
      @include set-var(background-color, get-var(hover-background-color));
    }

    @include utils.touch-only {
      &:hover::before {
        @include set-var(background-color, transparent);
      }
    }

    @if $mode == press or $mode == both {
      &.#{$pressed-class-name}::before {
        @include set-var(background-color, get-var(press-background-color));
      }
    }
  }

  @if $disabled-selector {
    #{$disabled-selector} {
      @if $clickable {
        cursor: auto;
      }

      @if $hoverable {
        &:hover::before {
          @include set-var(background-color, transparent);
        }
      }
    }
  }
}

@mixin styles {
  @if not $_disable-ripple {
    .rmd-ripple-container {
      border-radius: inherit;
      inset: 0;
      overflow: hidden;
      pointer-events: none;
      position: absolute;
      z-index: 0 !important;
    }

    .rmd-ripple {
      @include use-var(background-color, ripple-background-color);

      border-radius: 50%;
      position: absolute;
      transform: scale(0);

      &--animating {
        transition: transform
            $ripple-transform-duration
            transition.$deceleration-timing-function,
          opacity
            $ripple-opacity-duration
            transition.$acceleration-timing-function;
      }

      &--scaling {
        transform: scale(1);
      }

      &--fading {
        opacity: 0;
      }
    }
  }
}
