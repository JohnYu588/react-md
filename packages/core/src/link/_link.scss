@use "sass:map";
@use "../utils";
@use "../theme/colors";
@use "../theme/theme";
@use "../icon/icon";
@use "../interaction/interaction";
@use "../typography/typography";
@use "../transition/transition";

$disable-everything: false !default;
$disable-skip-to-main: false !default;
$disable-flex: false !default;

$transition-duration: transition.$linear-duration !default;
$color: colors.$blue-500 !default;
$visited-color: colors.$blue-600 !default;
$hover-color: colors.$blue-400 !default;

$skip-to-main-z-index: 10000 !default;
$skip-to-main-styles: (
  color: theme.theme-get-var(on-primary-color),
  left: 50%,
  padding: 0.25rem 1rem,
  top: 0.25rem,
  transform: translateX(-50%),
  z-index: $skip-to-main-z-index,
) !default;
$skip-to-main-active-styles: (
  outline: 0.25rem dashed #000,
) !default;

$variables: (color, visited-color, hover-color);

@function get-var($name, $fallback: null) {
  $var: utils.get-var-name($variables, $name, "link");
  @if $fallback {
    @return var(#{$var}, #{$fallback});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  @if $value {
    #{utils.get-var-name($variables, $name, "link")}: #{$value};
  }
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin use-light-theme {
  @include set-var(color, $light-theme-color);
}

@mixin use-dark-theme {
  @include set-var(color, $dark-theme-color);
}

@mixin style($position) {
  $property: "border-#{$position}";

  #{$property}: get-var(size) inset get-var(color);
}

@mixin variables {
  @if not $disable-everything {
    @include set-var(color, $color);
    @include set-var(visited-color, $visited-color);
    @include set-var(hover-color, $hover-color);
  }
}

@mixin styles {
  @if not $disable-everything {
    .rmd-link {
      @include interaction.outline($outline-offset: false);
      @include use-var(color);

      transition: color $transition-duration;

      &:visited {
        @include set-var(color, get-var(visited-color));
      }

      &:hover {
        @include set-var(color, get-var(hover-color));
      }

      // can't use the normal @include interaction.surface since links are
      // rendered inline and the `::before`/`::after` pseudo selectors only work
      // nicely with block-like elements
      @if utils.$disable-focus-visible {
        @include utils.keyboard-only {
          &:focus {
            @include interaction.focus-styles($disable-background: true);
          }
        }
      } @else {
        &:focus-visible {
          @include interaction.focus-styles($disable-background: true);
        }
      }

      @if not $disable-flex {
        &--flex {
          @include icon.use-var(gap, spacing);

          align-items: center;
          display: inline-flex;
        }
      }

      @if not $disable-skip-to-main {
        &--skip {
          @include utils.map-to-styles(
            map.remove(
              typography.$headline-6-styles,
              font-size,
              font-weight,
              letter-spacing
            )
          );
          @include utils.sr-only(true, null);
        }

        &--skip-styled {
          @include utils.map-to-styles($skip-to-main-styles);

          @if utils.$disable-focus-visible {
            @include utils.keyboard-only {
              &:focus,
              &:active {
                @include utils.map-to-styles($skip-to-main-active-styles);
              }
            }
          } @else {
            &:focus-visible {
              @include utils.map-to-styles($skip-to-main-active-styles);
            }
          }
        }
      }
    }
  }
}
