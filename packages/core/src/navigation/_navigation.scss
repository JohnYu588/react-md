@use "sass:list";
@use "sass:map";
@use "../utils";
@use "../tree/tree";
@use "../interaction/interaction";

$disable-everything: false !default;
$border-radius: 3rem !default;
$horizontal-padding: 0.25rem !default;
$padding-incrementor: 0.75rem !default;

$variables: (border-radius, horizontal-padding, padding-incrementor);

@function get-var($name, $fallback: null) {
  $var: utils.get-var-name($variables, $name, "navigation");
  @if $fallback {
    @return var(#{$var}, #{$fallback});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  @if $value {
    #{utils.get-var-name($variables, $name, "navigation")}: #{$value};
  }
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin variables {
  @if not $disable-everything {
    @include set-var(border-radius, $border-radius);
    @include set-var(horizontal-padding, $horizontal-padding);
    @include set-var(padding-incrementor, $padding-incrementor);
  }
}

@mixin styles($disable-layer: false) {
  $increasing-padding: calc(
    tree.get-var(depth) * get-var(padding-incrementor) +
      get-var(horizontal-padding)
  );

  @if not $disable-everything {
    @include utils.optional-layer(navigation, $disable-layer) {
      .rmd-nav-group {
        min-width: 0;

        &--np {
          padding: 0;
        }
      }

      .rmd-nav-item {
        @include utils.rtl {
          @include use-var(padding-left, horizontal-padding);

          padding-right: $increasing-padding;
        }
        @include use-var(padding-right, horizontal-padding);

        padding-left: $increasing-padding;
        padding-right: $horizontal-padding;

        // this is applied to both the `NavItemButton` and `NavItemLink`
        &__content {
          @include use-var(border-radius);

          font-size: inherit;
          justify-content: space-between;
          letter-spacing: inherit;
          line-height: initial;
          width: 100%;
        }

        &__link {
          justify-content: flex-start;

          &::after {
            @include utils.pseudo-element;
            @include interaction.use-var(
              background-color,
              selected-background-color
            );

            opacity: 0;
          }

          &--active::after {
            opacity: 1;
          }
        }
      }
    }
  }
}
