@use "sass:map";
@use "../utils";

$disable-collapse-transition: false !default;
$disable-cross-fade-transition: false !default;
$disable-scale-transition: false !default;
$disable-scale-y-transition: $disable-scale-transition !default;
$disable-skeleton-placeholder: false !default;

$linear-duration: 0.15s !default;
$enter-duration: 0.2s !default;
$leave-duration: 0.15s !default;

$sharp-timing-function: cubic-bezier(0.4, 0, 0.6, 1) !default;
$linear-timing-function: cubic-bezier(0.4, 0, 0.2, 1) !default;
$acceleration-timing-function: cubic-bezier(0.4, 0, 1, 1) !default;
$deceleration-timing-function: cubic-bezier(0, 0, 0.2, 1) !default;

$cross-fade-translate-distance: -1rem !default;
$cross-fade-transition-duration: 0.3s !default;

$scale-transition-enter-duration: $enter-duration !default;
$scale-transition-leave-duration: $leave-duration !default;
$scale-y-transition-enter-duration: $enter-duration !default;
$scale-y-transition-leave-duration: $leave-duration !default;

$skeleton-placeholder-height: 1em !default;
$skeleton-placeholder-background-color: #000 !default;
$skeleton-placeholder-animation: (
  0%: (
    opacity: 0.06,
  ),
  60%: (
    opacity: 0.1,
  ),
  80%: (
    opacity: 0.08,
  ),
  100%: (
    opacity: 0.06,
  ),
) !default;
$skeleton-placeholder-animation-duration: 1.8s !default;
$skeleton-placeholder-animation-timing-function: ease-in-out !default;

$transition-var-lookup: (
  skeleton-placeholder-background-color: (
    var: --rmd-skeleton-placeholder-background-color,
    value: $skeleton-placeholder-background-color,
  ),
  skeleton-placeholder-height: (
    var: --rmd-skeleton-placeholder-height,
    value: $skeleton-placeholder-height,
  ),
  skeleton-placeholder-width: (
    var: --rmd-skeleton-placeholder-width,
    value: null,
  ),
);

@function get-transition-var($name, $fallback: null) {
  $found: utils.validate($transition-var-lookup, $name, "transition var");
  $var: map.get($found, var);
  $value: if($fallback, $fallback, map.get($found, value));

  @if $value {
    @return var(#{$var}, #{$value});
  }

  @return var(#{$var});
}

@mixin set-transition-var($name, $value) {
  $var: map.get(
    utils.validate($transition-var-lookup, $name, "transition var"),
    var
  );

  #{$var}: #{$value};
}

@mixin use-transition-var($property, $name: $property, $fallback: null) {
  #{$property}: get-transition-var($name, $fallback);
}

@mixin collapse-transition {
  .rmd-collapse {
    transition-property: max-height, padding-bottom, padding-top;
    will-change: max-height, padding-bottom, padding-top;

    &--no-overflow {
      overflow: hidden;
    }

    &--enter {
      transition-timing-function: $deceleration-timing-function;
    }

    &--leave {
      transition-timing-function: $acceleration-timing-function;
    }
  }
}

@mixin cross-fade-transition {
  .rmd-cross-fade {
    opacity: 0;
    transform: translateY($cross-fade-translate-distance);

    &--active {
      opacity: 1;
      transform: translateY(0);
      transition-duration: $cross-fade-transition-duration;
      transition-property: opacity, transform;
      transition-timing-function: $deceleration-timing-function;
    }
  }
}

@mixin scale-transition {
  .rmd-scale-transition--enter {
    opacity: 0;
    transform: scale(0);
  }

  .rmd-scale-transition--enter-active {
    opacity: 1;
    transform: scale(1);
    transition-duration: $scale-transition-enter-duration;
    transition-property: opacity, transform;
    transition-timing-function: $deceleration-timing-function;
  }

  .rmd-scale-transition--exit {
    opacity: 1;
    transform: scale(1);
  }

  .rmd-scale-transition--exit-active {
    opacity: 0;
    transform: scale(0);
    transition-duration: $scale-transition-leave-duration;
    transition-property: opacity, transform;
    transition-timing-function: $acceleration-timing-function;
  }
}

@mixin scale-y-transition {
  .rmd-scale-transition--y-enter {
    transform: scaleY(0);
    transform-origin: 0 0;
  }

  .rmd-scale-transition--y-enter-active {
    transform: scaleY(1);
    @if $scale-y-transition-enter-duration != $scale-transition-enter-duration {
      transition-duration: $scale-y-transition-enter-duration;
    }
  }

  .rmd-scale-transition--y-exit {
    transform: scaleY(1);
    transform-origin: 0 0;
  }

  .rmd-scale-transition--y-exit-active {
    transform: scaleY(0);
    @if $scale-y-transition-leave-duration != $scale-transition-leave-duration {
      transition-duration: $scale-y-transition-leave-duration;
    }
  }
}

@mixin skeleton-placeholder-animation {
  .rmd-skeleton-placeholder {
    @include use-transition-var(
      background-color,
      skeleton-placeholder-background-color
    );
    @include use-transition-var(height, skeleton-placeholder-height);

    &--animate {
      animation: rmd-skeleton-placeholder
        $skeleton-placeholder-animation-duration
        $skeleton-placeholder-animation-timing-function infinite;
    }
  }

  @keyframes rmd-skeleton-placeholder {
    @include utils.map-to-animation($skeleton-placeholder-animation);
  }
}

@mixin transition {
  @if not $disable-collapse-transition {
    @include collapse-transition;
  }

  @if not $disable-cross-fade-transition {
    @include cross-fade-transition;
  }

  @if not $disable-scale-transition or not $disable-scale-y-transition {
    @include scale-transition;
  }

  @if not $disable-scale-y-transition {
    @include scale-y-transition;
  }

  @if not $disable-skeleton-placeholder {
    @include skeleton-placeholder-animation;
  }
}
