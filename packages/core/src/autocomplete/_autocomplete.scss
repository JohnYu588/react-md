@use "sass:list";
@use "sass:map";
@use "sass:math";
@use "sass:string";
@use "../utils";
@use "../box/box";
@use "../button/button";
@use "../chip/chip";
@use "../icon/icon";
@use "../form/form";
@use "../progress/progress";

$disable-everything: false !default;
$disable-clear-button: false !default;
$disable-dropdown-button: false !default;
$disable-circular-progress: false !default;
$disable-text-overflow-ellipsis: false !default;
$disable-inline-chips: chip.$disable-everything !default;

$inline-min-width: 5rem !default;
$inline-chips-gap: icon.get-var(spacing) !default;
$inline-outlined-vertical-padding: calc(
  (form.get-var(text-field-height) - chip.get-var(height)) / 2 -
    form.$text-field-border-width
) !default;
$inline-input-leading-padding: chip.get-var(horizontal-padding) !default;

$button-size: button.$icon-small-size !default;
$circular-progress-size: button.$icon-small-size !default;
$addon-gap: form.$text-field-addon-gap !default;
$addon-spacing: form.get-var(addon-spacing) !default;

$clear-button-size: calc(button.get-var(icon-font-size) * 2) !default;
$dropdown-button-size: calc(button.get-var(icon-font-size) * 2) !default;
$circular-progress-size: progress.get-var(circular-size) !default;

$_chip-selector: ".rmd-autocomplete__chip";
$_clear-button-selector: ".rmd-autocomplete__clear-button";
$_dropdown-button-selector: ".rmd-autocomplete__dropdown-button";
$_outline-selector: ".rmd-text-field-container--outline";
$_underline-selector: ".rmd-text-field-container--underline";

$variables: (
  clear-button-size,
  dropdown-button-size,
  circular-progress-size,
  inline-gap,
  inline-min-width,
  addon-gap,
  gap-count,
  addon-spacing
);

@function get-var($name, $fallback: null) {
  $var: utils.get-var-name($variables, $name, "autocomplete");
  @if $fallback {
    @return var(#{$var}, #{$fallback});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  @if $value {
    #{utils.get-var-name($variables, $name, "autocomplete")}: #{$value};
  }
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin variables {
  @if not $disable-everything {
    @include set-var(addon-gap, $addon-gap);
    @include set-var(addon-spacing, $addon-spacing);
    @if not $disable-inline-chips {
      @include set-var(inline-gap, $inline-chips-gap);
      @include set-var(inline-min-width, $inline-min-width);
    }
  }
}

@function _right-addon-calc() {
  $calc-spacing: get-var(addon-spacing);
  $calc-total-gap: calc(get-var(gap-count, 0) * get-var(addon-gap));
  $calc-clear-button: if(
    $disable-clear-button,
    "",
    " + " + get-var(clear-button-size, 0px)
  );
  $calc-dropdown-button: if(
    $disable-dropdown-button,
    "",
    " + " + get-var(dropdown-button-size, 0px)
  );
  $calc-circular-progress: if(
    $disable-circular-progress,
    "",
    " + " + get-var(circular-progress-size, 0px)
  );
  $calc-addon-size: $calc-clear-button + $calc-dropdown-button +
    $calc-circular-progress;

  @return calc($calc-spacing + #{$calc-total-gap + $calc-addon-size});
}

@function _add-has-selector($appending-selector, $addon-selector) {
  $prefix: if(string.length($appending-selector), "", "&");

  @return $appending-selector + $prefix + ":has(" + $addon-selector + ")";
}

@mixin styles($disable-layer: false) {
  // disclaimer: this is the first component where I'm trying to utilize more of
  // the `:has`, `:where`, `:is`, etc selectors to require less javascript and
  // move more behavior into CSS

  @if not $disable-everything {
    @include utils.optional-layer(autocomplete, $disable-layer) {
      .rmd-autocomplete {
        @if not $disable-clear-button and not $disable-dropdown-button {
          @include button.set-var(icon-font-size, $button-size);
        }
        @if not $disable-circular-progress {
          @include progress.set-var(circular-size, $circular-progress-size);
        }

        @if not
          $disable-clear-button or not
          $disable-dropdown-button or not
          $disable-circular-progress
        {
          // the way the padding right works is to create a calc string that
          // sums all the available addons widths (including gap) that have
          // been rendered in the autocomplete. to calculate the gap, the
          // `&--db` and `&--cp` selectors will increase the `gap-count`
          // variable based on how many other addons exist with it.
          //
          // So:
          // - only clear button - count == 0
          // - only dropdown button - count == 0
          // - only circular progress - count == 0
          // - clear button and dropdown button - count == 1
          // - clear button and circular progress - count == 1
          // - dropdown button and circular progress - count == 1
          // - circular progress, clear button, and dropdown button - count == 2
          //
          // When the addon isn't included, its size will be set to `0px`. When
          // the addon is included, the size is set to the correct value
          @include form.set-var(text-field-padding-right, _right-addon-calc());
        }

        @if not $disable-text-overflow-ellipsis {
          &:where(:not(:hover):not(:focus-within)) :where(.rmd-text-field) {
            text-overflow: ellipsis;
          }
        }

        @if not $disable-clear-button {
          &--cb {
            @include set-var(clear-button-size, $clear-button-size);
          }
        }

        @if not $disable-dropdown-button {
          &--db {
            @include set-var(dropdown-button-size, $dropdown-button-size);

            @if not $disable-clear-button {
              &:has(#{$_clear-button-selector}) {
                @include set-var(gap-count, 1);
              }
            }
          }
        }

        @if not $disable-circular-progress {
          &--cp {
            @include set-var(circular-progress-size, $circular-progress-size);

            $two-addon-selector: "";
            $single-selector-list: ();
            @if not $disable-clear-button {
              $single-selector-list: list.append(
                $single-selector-list,
                $_clear-button-selector,
                $separator: comma
              );
              $two-addon-selector: _add-has-selector(
                $two-addon-selector,
                $_clear-button-selector
              );
            }

            @if not $disable-dropdown-button {
              $single-selector-list: list.append(
                $single-selector-list,
                $_dropdown-button-selector,
                $separator: comma
              );
              $two-addon-selector: _add-has-selector(
                $two-addon-selector,
                $_dropdown-button-selector
              );
            }

            @if list.length($single-selector-list) {
              &:has(#{$single-selector-list}) {
                @include set-var(gap-count, 1);
              }
            }
            @if string.length($two-addon-selector) {
              #{$two-addon-selector} {
                @include set-var(gap-count, 2);
              }
            }
          }
        }

        @include utils.mouse-hover($wrap-in-hover: false) {
          &:where(:not(:hover):not(:focus-within))
            :where(#{$_clear-button-selector}) {
            opacity: 0;
          }
        }

        @if not $disable-inline-chips {
          // the basic idea for the inline chips are:
          // - move any padding from the input to the container element
          // - update the styles to display a text cursor when hovering the
          //   container element instead of only the input (since clicking
          //   anywhere in the container focuses the input)
          // - keep other styles the same until at least one chip exists
          // - when a chip exists, update the vertical padding to align
          //   everything nicely
          // - the input will also be updated to align with the text of a chip
          //   so it looks nicely when stacked and starting at the beginning of
          //   a line
          // - I am NOT updating the underline behavior to match the input width
          //   since those are still "boxed" elements and it helps show current
          //   focus
          &--inline-chips {
            @include form.use-var(min-height, text-field-height);
            @include form.use-var(padding-right, text-field-padding-right);
            @include use-var(gap, inline-gap);

            flex-wrap: wrap;
            height: auto;

            &:where(:not(:has(.rmd-text-field:disabled))) {
              cursor: text;
            }

            @if not
              form.$disable-text-field-filled-theme or not
              form.$disable-text-field-underlined-theme
            {
              &:where(#{$_underline-selector}):has(#{$_chip-selector}) {
                @include form.use-var(padding-top, text-field-padding-top);
                @include use-var(padding-bottom, inline-gap);

                :where(.rmd-text-field) {
                  padding-top: 0;
                }
              }
            }

            @if not form.$disable-text-field-outlined-theme {
              &:where(#{$_outline-selector}):has(#{$_chip-selector}) {
                padding-bottom: $inline-outlined-vertical-padding;
                padding-top: $inline-outlined-vertical-padding;
              }
            }

            &:has(#{$_chip-selector}) {
              // when at least one chip exists, ensure the text field has some
              // leading padding and always display the placeholder (if exists)
              // since the label will also be forced to floating
              :where(.rmd-text-field) {
                @include use-var(min-width, inline-min-width);
                @include chip.use-var(height);

                padding-left: $inline-input-leading-padding;
                padding-right: 0;
                width: 0;

                &::placeholder {
                  opacity: 1;
                }

                @include utils.rtl {
                  padding-left: 0;
                  padding-right: $inline-input-leading-padding;
                }
              }
            }

            @include utils.rtl {
              @include form.use-var(padding-left, text-field-padding-right);

              padding-right: 0;
            }
          }
        }

        &__right-addon {
          padding-left: get-var(addon-spacing);
          right: 0;

          @include utils.rtl {
            left: 0;
            padding-left: 0;
            padding-right: get-var(addon-spacing);
            right: auto;
          }
        }
      }
    }
  }
}
