@use "sass:map";
@use "../utils";

$default-align-items: center !default;

$disable-everything: false !default;
$disable-stacked: false !default;
$disable-reversed: false !default;
$disable-grid: false !default;
$disable-grid-columns: false !default;

$align-items: (start end stretch) !default;
$justify-content: (
  start center end stretch space-around space-between space-evenly
) !default;

$gap: 1rem !default;
$padding: $gap !default;
$item-min-size: 8rem !default;

/// This should look like:
/// ```scss
/// $grids: (
///   small: (
///     min: 5rem
///   ),
///   medium: (
///     min: 7rem,
///     padding: 2rem,
///     gap: 0.5rem
///   )
/// );
/// ```
$grids: () !default;

$variables: (gap, padding, item-min-size, columns);

@function get-var($name, $fallback: null) {
  $var: utils.get-var-name($variables, $name, "box");
  @if $fallback {
    @return var(#{$var}, #{$fallback});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  @if $value {
    #{utils.get-var-name($variables, $name, "box")}: #{$value};
  }
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin custom-grid($min: null, $padding: null, $gap: null) {
  @if $min {
    @include set-var(min-size, $min);
  }

  @if $padding {
    @include set-var(padding, $padding);
  }

  @if $gap {
    @include set-var(gap, $gap);
  }
}

@mixin custom-grid-class($selector, $min: null, $padding: null, $gap: null) {
  #{$selector} {
    @include custom-grid($min, $padding, $gap);
  }
}

@mixin variables {
  @if not $disable-everything {
    @include set-var(gap, $gap);
    @include set-var(padding, $padding);
    @include set-var(item-min-size, $item-min-size);
    @include set-var(columns, auto-fit);
  }
}

@mixin styles {
  @if not $disable-everything {
    .rmd-box {
      @include use-var(gap, gap);

      align-items: $default-align-items;
      display: flex;

      &--padded {
        @include use-var(padding);
      }

      &--wrap {
        flex-wrap: wrap;
      }

      &--full-width {
        width: 100%;
      }

      @if not $disable-stacked {
        &--column {
          flex-direction: column;
        }
      }

      @if not $disable-reversed {
        &--reverse {
          flex-direction: row-reverse;
        }

        @if not $disable-stacked {
          &--column-reverse {
            flex-direction: column-reverse;
          }
        }
      }

      @each $value in $align-items {
        &--align-#{$value} {
          align-items: $value;
        }
      }

      @each $value in $justify-content {
        &--justify-#{utils.str-replace($value, "space-", "")} {
          justify-content: $value;
        }
      }

      @if not $disable-grid {
        &--grid {
          display: grid;
          grid-template-columns: repeat(
            get-var(columns),
            minmax(get-var(item-min-size), 1fr)
          );
        }

        &--grid-fill {
          @include set-var(columns, auto-fill);
        }

        @if not $disable-grid-columns {
          &--grid-columns {
            @include set-var(item-min-size, 0);
          }
        }

        @each $name, $values in $grids {
          @include custom-grid-class(
            "&--#{$name}",
            $min: map.get($values, min),
            $gap: map.get($values, gap),
            $padding: map.get($values, padding)
          );
        }
      }
    }
  }
}
