@use "sass:map";
@use "@react-md/core";

$disable-vertical: false !default;
$disable-inset: false !default;

$size: 0.0625rem !default;
$max-size: 100% !default;
$inset: 4rem !default;
$spacing: 0.25rem auto !default;
$vertical-spacing: auto 0.25rem !default;

$light-theme-color: rgba(#000, 0.12) !default;
$dark-theme-color: rgba(#fff, 0.12) !default;

$color: if(
  core.$color-scheme == dark,
  $dark-theme-color,
  $light-theme-color
) !default;

$var-lookup: (
  size: (
    var: --rmd-divider-size,
    value: $size,
  ),
  color: (
    var: --rmd-divider-color,
    value: $color,
  ),
  spacing: (
    var: --rmd-divider-spacing,
    value: $spacing,
  ),
  inset: (
    var: --rmd-divider-inset,
    value: $inset,
  ),
  width: (
    var: --rmd-divider-width,
    value: $max-size,
  ),
  max-size: (
    var: --rmd-divider-max-size,
    value: $max-size,
  ),
);

@function get-var($name, $fallback: null) {
  $found: core.validate($var-lookup, $name, "divider var");
  $var: map.get($found, var);
  $value: if($fallback, $fallback, map.get($found, value));

  @if $value {
    @return var(#{$var}, #{$value});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  $var: map.get(core.validate($var-lookup, $name, "divider var"), var);

  #{$var}: #{$value};
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin use-light-theme {
  @include set-var(color, $light-theme-color);
}

@mixin use-dark-theme {
  @include set-var(color, $dark-theme-color);
}

@mixin style($position) {
  $property: "border-#{$position}";

  #{$property}: get-var(size) inset get-var(color);
}

@mixin styles {
  .rmd-divider {
    @include style(bottom);
    @include use-var(margin, spacing);
    @include use-var(width);

    display: block;
    flex-shrink: 0;

    @if not $disable-inset {
      &--inset {
        @include core.auto-rtl(margin-left, get-var(inset), auto);

        width: calc(get-var(max-size) - get-var(inset));
      }
    }

    @if not $disable-vertical {
      &--vertical {
        @include style(left);
        @include use-var(height, max-size);
        @include use-var(width, size);

        border-bottom: 0;
        display: inline-block;
      }
    }
  }

  @if not core.$disable-default-system-theme and core.$color-scheme == system {
    @media (prefers-color-scheme: dark) {
      :root {
        @include use-dark-theme;
      }
    }
  }
}
