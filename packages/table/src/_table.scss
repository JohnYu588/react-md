@use "sass:map";
@use "@react-md/core";

$disable-container: false !default;
$disable-dense: false !default;
$disable-full-width: false !default;
$disable-cell-header-align-left: false !default;
$disable-cell-align-center: false !default;
$disable-cell-align-right: false !default;
$disable-cell-align-top: false !default;
$disable-cell-align-bottom: false !default;
$disable-bordered: false !default;
$disable-bordered-except-last: false !default;
$disable-selected: false !default;
$disable-clickable: false !default;
$disable-hoverable: false !default;
// convenience variable to disable all sticky behavior
$disable-sticky: false !default;
// disable the sticky cells (within tbody)
$disable-sticky-cell: $disable-sticky !default;
$disable-sticky-header: $disable-sticky !default;
$disable-sticky-footer: $disable-sticky !default;
$disable-checkbox: false !default;
$disable-cell-no-wrap: false !default;
$disable-cell-grow: false !default;
$disable-cell-no-padding: false !default;
$disable-cell-sort: false !default;
$disable-cell-grow: false !default;
$disable-cell-vertical-padding: false !default;

// defaults to `null` so it just inherits the background color
$light-theme-background-color: null !default;
$dark-theme-background-color: null !default;
$background-color: if(
  core.$color-scheme == dark,
  $dark-theme-background-color,
  $light-theme-background-color
) !default;
$light-theme-border-color: #e0e0e0 !default;
$dark-theme-border-color: #2f2f2f !default;
$border-color: if(
  core.$color-scheme == dark,
  $dark-theme-border-color,
  $light-theme-border-color
) !default;
$border-size: core.$divider-size !default;

$light-theme-header-background-color: null !default;
$dark-theme-header-background-color: null !default;
$header-background-color: if(
  core.$color-scheme == dark,
  $dark-theme-header-background-color,
  $light-theme-header-background-color
) !default;

$cell-typography: core.$body-2-styles !default;
$cell-color: core.theme-get-var(text-primary-color) !default;
$cell-height: 3.25rem !default;
$cell-dense-height: 2rem !default;
$cell-header-color: $cell-color !default;
$cell-header-typography: (
  font-weight: map.get(core.$subtitle-2-styles, font-weight),
  letter-spacing: map.get(core.$subtitle-2-styles, letter-spacing),
  line-height: map.get(core.$subtitle-2-styles, line-height),
) !default;
$cell-header-height: 3.5rem !default;
$cell-header-dense-height: 2.125rem !default;
$cell-horizontal-padding: 1rem !default;
$cell-vertical-padding: 0.375rem !default;
$cell-checkbox-horizontal-padding: 0.5rem !default;

$sticky-cell-position: 0 !default;
$sticky-header-position: 0 !default;
$sticky-header-z-index: 2 !default;
$sticky-header-cell-z-index: $sticky-header-z-index + 1 !default;
$sticky-cell-z-index: $sticky-header-z-index - 1 !default;
$sticky-footer-position: 0 !default;
$sticky-footer-z-index: $sticky-header-z-index - 1 !default;
$sticky-background-color: core.theme-get-var(background-color) !default;
$sticky-header-inactive-styles: (
  transition: background core.$linear-duration core.$linear-timing-function,
  "&::after": (
    box-shadow: core.box-shadow(4),
    content: "",
    inset: 0,
    pointer-events: none,
    opacity: 0,
    position: absolute,
    transition: opacity core.$linear-duration core.$linear-timing-function,
    z-index: 0,
  ),
) !default;
$sticky-header-active-styles: (
  "--rmd-background-color": core.get-dark-elevation-color(4),
  background-color: core.theme-get-var(background-color),
  "&::after": (
    opacity: 1,
  ),
) !default;
$sticky-footer-inactive-styles: $sticky-header-inactive-styles !default;
$sticky-footer-active-styles: $sticky-header-active-styles !default;

$row-hover-color: core.interaction-get-var(hover-background-color) !default;
$row-selected-color: core.interaction-get-var(
  selected-background-color
) !default;

$var-lookup: (
  background-color: (
    var: --rmd-table-background-color,
    value: $background-color,
  ),
  border-size: (
    var: --rmd-table-border-size,
    value: $border-size,
  ),
  border-color: (
    var: --rmd-table-border-color,
    value: $border-color,
  ),
  header-background-color: (
    var: --rmd-table-header-background-color,
    value: $header-background-color,
  ),
  cell-color: (
    var: --rmd-table-cell-color,
    value: $cell-color,
  ),
  cell-height: (
    var: --rmd-table-cell-height,
    value: $cell-height,
  ),
  cell-horizontal-padding: (
    var: --rmd-table-cell-horizontal-padding,
    value: $cell-horizontal-padding,
  ),
  cell-vertical-padding: (
    var: --rmd-table-cell-vertical-padding,
    value: $cell-vertical-padding,
  ),
  header-cell-height: (
    var: --rmd-table-header-cell-height,
    value: $cell-header-height,
  ),
  hover-color: (
    var: --rmd-table-hover-color,
    value: $row-hover-color,
  ),
  selected-color: (
    var: --rmd-table-selected-color,
    value: $row-selected-color,
  ),
  sticky-cell: (
    var: --rmd-table-sticky-cell,
    value: $sticky-cell-position,
  ),
  sticky-header: (
    var: --rmd-table-sticky-header,
    value: $sticky-header-position,
  ),
  sticky-footer: (
    var: --rmd-table-sticky-footer,
    value: $sticky-footer-position,
  ),
  sticky-background-color: (
    var: --rmd-table-sticky-background-color,
    value: $sticky-background-color,
  ),
);

@function get-var($name, $fallback: null) {
  $found: core.validate($var-lookup, $name, "table var");
  $var: map.get($found, var);
  $value: if($fallback, $fallback, map.get($found, value));

  @if $value {
    @return var(#{$var}, #{$value});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  $var: map.get(core.validate($var-lookup, $name, "table var"), var);

  #{$var}: #{$value};
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

// these have to be initialized after the css-var stuff to work
$row-hover-styles: (
  background-color: get-var(hover-color),
) !default;
$row-selected-styles: (
  background-color: get-var(selected-color),
) !default;

@mixin use-light-theme {
  @include set-var(border-color, $light-theme-border-color);
  @if $light-theme-background-color {
    @include set-var(background-color, $light-theme-background-color);
  }

  @if $light-theme-header-background-color {
    @include set-var(header-color, $light-theme-header-background-color);
  }
}

@mixin use-dark-theme {
  @include set-var(border-color, $dark-theme-border-color);
  @if $dark-theme-background-color {
    @include set-var(background-color, $dark-theme-background-color);
  }

  @if $dark-theme-header-background-color {
    @include set-var(header-color, $dark-theme-header-background-color);
  }
}

@mixin styles {
  @if not $disable-container {
    .rmd-table-container {
      max-width: 100%;
      overflow: auto;
    }
  }

  .rmd-table {
    @include use-var(background-color);

    // NOTE: Switched from `border-collapse: collapse` to `border-spacing: 0`
    // since enabling sticky headers removed the borders for some reason in
    // firefox. all I really wanted was the spacing to be removed from each
    // cell, so border-spacing seems better.
    border-spacing: 0;
    max-width: 100%;

    @if not $disable-full-width {
      &--full-width {
        width: 100%;
      }
    }
  }

  .rmd-thead {
    @include use-var(background-color, header-background-color);
    @if $cell-height != $cell-header-height {
      @include set-var(cell-height, $cell-header-height);
    }

    @if not $disable-dense and $cell-dense-height {
      &--dense {
        @include set-var(cell-height, $cell-header-dense-height);
      }
    }

    @if not $disable-sticky-header {
      &--sticky {
        @include use-var(background-color, sticky-background-color);
        @include use-var(top, sticky-header);
        @include core.map-to-styles($sticky-header-inactive-styles);

        position: sticky;
        z-index: $sticky-header-z-index;
      }

      &--sticky-active {
        @include core.map-to-styles($sticky-header-active-styles);
      }
    }
  }

  .rmd-tfoot {
    @if not $disable-sticky-footer {
      &--sticky {
        @include use-var(background-color, sticky-background-color);
        @include use-var(bottom, sticky-footer);
        @include core.map-to-styles($sticky-footer-inactive-styles);

        position: sticky;
        z-index: $sticky-footer-z-index;
      }

      &--sticky-active {
        @include core.map-to-styles($sticky-footer-active-styles);
      }
    }
  }

  .rmd-tr {
    @if not $disable-clickable {
      &--clickable:hover {
        cursor: pointer;
      }
    }

    @if not $disable-selected {
      &--selected {
        @include core.map-to-styles($row-selected-styles);
      }
    }

    @if not $disable-bordered {
      &--bordered {
        border-bottom: get-var(border-size) solid get-var(border-color);

        @if not $disable-bordered-except-last {
          &:last-child {
            border-bottom-width: 0;
          }
        }
      }
    }

    @if not $disable-hoverable {
      &--hoverable {
        @include core.mouse-only {
          transition: background core.$linear-duration
            core.$linear-timing-function;

          &:hover {
            @include core.map-to-styles($row-hover-styles);
          }
        }
      }
    }
  }

  .rmd-table-cell {
    @include core.map-to-styles($cell-typography);
    @include use-var(color, cell-color);
    @include use-var(height, cell-height);

    border: inherit;
    padding: 0 get-var(cell-horizontal-padding);

    &--header {
      @include core.map-to-styles($cell-header-typography);
      @if $cell-color != $cell-header-color {
        @include set-var(cell-color, $cell-header-color);
      }
      @if not $disable-cell-header-align-left {
        @include core.rtl {
          text-align: right;
        }

        text-align: left;
      }
    }

    @if not $disable-sticky-cell {
      &--sticky {
        position: sticky;
        will-change: transform;
      }

      &--sticky-cell {
        @include core.auto-rtl(left, get-var(sticky-cell));
        @include core.use-theme-var(background-color);

        transition: background-color core.$linear-duration;
        z-index: $sticky-cell-z-index;

        &::after {
          @include core.pseudo-element;

          background-color: transparent;
          transition: background
            core.$linear-duration
            core.$linear-timing-function;

          .rmd-tr--hoverable:hover & {
            @include use-var(background-color, hover-color);
          }

          .rmd-tr--selected & {
            @include use-var(background-color, selected-color);
          }
        }
      }

      @if not $disable-sticky-header {
        &--sticky-header {
          @include use-var(top, sticky-header);

          z-index: $sticky-header-z-index;
        }
      }

      @if not $disable-checkbox and not $disable-sticky-header {
        &--sticky-header-cell {
          z-index: $sticky-header-cell-z-index;
        }
      }
    }

    @if not $disable-checkbox {
      &--checkbox {
        @include set-var(
          cell-horizontal-padding,
          $cell-checkbox-horizontal-padding
        );
      }
    }

    @if not $disable-cell-grow {
      &--grow {
        width: 100%;
      }
    }

    @if not $disable-cell-no-wrap {
      &--no-wrap {
        @include core.text-overflow;
      }
    }

    @if not $disable-cell-vertical-padding {
      &--padded {
        @include use-var(padding-bottom, cell-vertical-padding);
        @include use-var(padding-top, cell-vertical-padding);
      }
    }

    @if not $disable-cell-sort {
      &--no-padding {
        padding: 0;
      }

      &__child {
        @include use-var(padding-left, cell-horizontal-padding);
        @include use-var(padding-right, cell-horizontal-padding);

        align-items: center;
        color: inherit;
        font: inherit;
        height: 100%;
        width: 100%;
      }
    }
  }
}
