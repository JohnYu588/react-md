{
  "public/index.html": {
    "content": "<!DOCTYPE html>\n<html lang=\"en\" class=\"{{THEME}}-theme\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta\n      name=\"viewport\"\n      content=\"width=device-width, initial-scale=1, shrink-to-fit=no\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Material+Icons|Roboto:400,500,700|Source+Code+Pro\"\n    />\n    <!-- the styles are loaded through the CDN to speed up codesandbox demos. You'll normally want to import the `src/styles.scss` in the `src/index.tsx` instead to create custom themes -->\n    <link\n      rel=\"stylesheet\"\n      href=\"https://cdn.jsdelivr.net/gh/mlaursen/react-md@{{RMD_VERSION}}/themes/react-md.teal-pink-200-{{THEME}}.min.css\"\n    />\n    <title>List Example - Configurable Example</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"root\"></div>\n  </body>\n</html>\n"
  },
  "src/index.jsx": {
    "content": "import React from 'react';\nimport { render } from 'react-dom';\nimport { Configuration } from '@react-md/layout';\n\n// the styles are actually loaded as the pre-compiled themes in the index.html\n// to speed up sandbox compilation. If you want to update the theme, you'll need\n// to uncomment this line and remove the `<link>` tag in the `index.html`\n// import \"./styles.scss\"\n\nimport Demo from './Demo';\n\nconst App = () => (\n  <Configuration>\n    <Demo />\n  </Configuration>\n);\n\nrender(<App />, document.getElementById('root'));\n"
  },
  "src/styles.scss": {
    "content": "@import 'variables';\n@import '~@react-md/layout/dist/mixins';\n@import '~@react-md/states/dist/mixins';\n@import '~@react-md/theme/dist/mixins';\n@import '~@react-md/typography/dist/mixins';\n@import '~@react-md/utils/dist/mixins';\n@import '~@react-md/avatar/dist/mixins';\n@import '~@react-md/list/dist/mixins';\n@import '~@react-md/form/dist/mixins';\n\n@include react-md-utils;\n"
  },
  "src/_variables.scss": {
    "content": "@import \"~@react-md/theme/dist/color-palette\";\n\n$rmd-theme-light: true;\n$rmd-theme-primary: $rmd-teal-500;\n$rmd-theme-secondary: $rmd-pink-a-200;\n"
  },
  "package.json": {
    "content": {
      "title": "List Example - Configurable Example",
      "description": "Example from https://react-md.dev/packages/list/demos#configurable-example",
      "main": "src/index.jsx",
      "dependencies": {
        "@react-md/avatar": "latest",
        "@react-md/form": "latest",
        "@react-md/layout": "latest",
        "@react-md/list": "latest",
        "@react-md/material-icons": "latest",
        "@react-md/states": "latest",
        "@react-md/theme": "latest",
        "@react-md/typography": "latest",
        "@react-md/utils": "latest",
        "lodash": "latest",
        "react": "latest",
        "react-dom": "latest"
      },
      "devDependencies": {
        "@types/jest": "latest",
        "@types/node": "latest",
        "@types/react": "latest",
        "@types/react-dom": "latest",
        "node-sass": "latest",
        "react-scripts": "latest",
        "typescript": "latest"
      },
      "scripts": {
        "start": "react-scripts start"
      }
    }
  },
  "src/Demo.jsx": {
    "content": "import React, { useState } from 'react';\nimport { Avatar } from '@react-md/avatar';\nimport { List, ListItem } from '@react-md/list';\nimport { InfoSVGIcon, StyleSVGIcon } from '@react-md/material-icons';\n\nimport ConfigurationForm from './ConfigurationForm';\n\nconst LEFT_LOOKUPS = {\n  none: null,\n  icon: <StyleSVGIcon />,\n  avatar: <Avatar src=\"https://picsum.photos/40/40?image=123\" />,\n  media: <img src=\"https://picsum.photos/56?image=700\" alt=\"\" />,\n  'large-media': <img src=\"https://picsum.photos/100/56?image=800\" alt=\"\" />,\n};\n\nconst RIGHT_LOOKUPS = {\n  none: null,\n  icon: <InfoSVGIcon />,\n  avatar: <Avatar>A</Avatar>,\n  media: <img src=\"https://picsum.photos/56?image=901\" alt=\"\" />,\n  'large-media': <img src=\"https://picsum.photos/100/56?image=203\" alt=\"\" />,\n};\n\nexport default function ConfigurableExample() {\n  const [disabled, setDisabled] = useState(false);\n  const [disabledOpacity, setDisabledOpacity] = useState(false);\n  const [leftAddon, setLeftAddon] = useState('none');\n  const [leftAddonPosition, setLeftAddonPosition] = useState('middle');\n  const [rightAddonPosition, setRightAddonPosition] = useState('middle');\n  const [rightAddon, setRightAddon] = useState('none');\n  const [primaryText, setPrimaryText] = useState('Hello, world!');\n  const [secondaryText, setSecondaryText] = useState('');\n  const [threeLines, setThreeLines] = useState(false);\n\n  return (\n    <>\n      <List>\n        <ListItem\n          disabled={disabled}\n          disabledOpacity={disabledOpacity}\n          leftAddon={LEFT_LOOKUPS[leftAddon]}\n          leftAddonType={leftAddon === 'none' ? undefined : leftAddon}\n          leftAddonPosition={leftAddonPosition}\n          rightAddon={RIGHT_LOOKUPS[rightAddon]}\n          rightAddonType={rightAddon === 'none' ? undefined : rightAddon}\n          rightAddonPosition={rightAddonPosition}\n          primaryText={primaryText}\n          secondaryText={secondaryText}\n          threeLines={threeLines}\n        />\n      </List>\n      <ConfigurationForm\n        disabled={disabled}\n        setDisabled={setDisabled}\n        disabledOpacity={disabledOpacity}\n        setDisabledOpacity={setDisabledOpacity}\n        primaryText={primaryText}\n        setPrimaryText={setPrimaryText}\n        secondaryText={secondaryText}\n        setSecondaryText={setSecondaryText}\n        threeLines={threeLines}\n        setThreeLines={setThreeLines}\n        leftAddon={leftAddon}\n        setLeftAddon={setLeftAddon}\n        leftAddonPosition={leftAddonPosition}\n        setLeftAddonPosition={setLeftAddonPosition}\n        rightAddon={rightAddon}\n        setRightAddon={setRightAddon}\n        rightAddonPosition={rightAddonPosition}\n        setRightAddonPosition={setRightAddonPosition}\n      />\n    </>\n  );\n}\n"
  },
  "src/ConfigurationForm.jsx": {
    "content": "import React from 'react';\nimport { Checkbox, Fieldset, Form, Select, TextArea } from '@react-md/form';\n\nimport { Text } from '@react-md/typography';\nimport { Grid } from '@react-md/utils';\nimport { upperFirst } from 'lodash';\n\nconst ADDON_TYPES = ['none', 'icon', 'avatar', 'media', 'large-media'];\n\nconst ADDON_TYPE_OPTIONS = ADDON_TYPES.map((type) => ({\n  name: type.split('-').map(upperFirst).join(' '),\n  value: type,\n}));\n\nconst isAddonType = (value) => ADDON_TYPES.includes(value);\n\nconst ADDON_POSITIONS = ['top', 'middle', 'bottom'];\n\nconst isAddonPosition = (value) => ADDON_POSITIONS.includes(value);\n\nexport default function ConfigurationForm({\n  disabled,\n  setDisabled,\n  disabledOpacity,\n  setDisabledOpacity,\n  primaryText,\n  setPrimaryText,\n  secondaryText,\n  setSecondaryText,\n  threeLines,\n  setThreeLines,\n  leftAddon,\n  setLeftAddon,\n  leftAddonPosition,\n  setLeftAddonPosition,\n  rightAddon,\n  setRightAddon,\n  rightAddonPosition,\n  setRightAddonPosition,\n}) {\n  return (\n    <Form>\n      <Text type=\"headline-4\">Customization</Text>\n      <Fieldset legend=\"Disabled Behavior\">\n        <Checkbox\n          id=\"configurable-disabled\"\n          name=\"disabled\"\n          label=\"Disabled\"\n          checked={disabled}\n          onChange={(event) => setDisabled(event.currentTarget.checked)}\n        />\n        <Checkbox\n          id=\"configurable-disabled-opacity\"\n          name=\"disabledOpacity\"\n          label=\"Disabled opacity\"\n          checked={disabledOpacity}\n          onChange={(event) => setDisabledOpacity(event.currentTarget.checked)}\n        />\n      </Fieldset>\n      <Fieldset legend=\"Text Behavior\">\n        <Grid columns={1}>\n          <TextArea\n            id=\"configurable-primary-text\"\n            name=\"primaryText\"\n            label=\"Primary Text\"\n            value={primaryText}\n            onChange={(event) => setPrimaryText(event.currentTarget.value)}\n          />\n          <TextArea\n            id=\"configurable-secondary-text\"\n            name=\"secondaryText\"\n            label=\"Secondary Text\"\n            value={secondaryText}\n            onChange={(event) => setSecondaryText(event.currentTarget.value)}\n          />\n          <Checkbox\n            id=\"configurable-three-lines\"\n            name=\"threeLines\"\n            label=\"Three Lines\"\n            checked={threeLines}\n            onChange={(event) => setThreeLines(event.currentTarget.checked)}\n          />\n        </Grid>\n      </Fieldset>\n      <Fieldset legend=\"Left Addon Behavior\">\n        <Grid columns={2} phoneColumns={1}>\n          <Select\n            id=\"configurable-left-addon\"\n            name=\"leftAddon\"\n            label=\"Left Addon\"\n            labelKey=\"name\"\n            valueKey=\"value\"\n            value={leftAddon}\n            onChange={(nextValue) => {\n              if (isAddonType(nextValue)) {\n                setLeftAddon(nextValue);\n              }\n            }}\n            options={ADDON_TYPE_OPTIONS}\n          />\n          <Select\n            id=\"configurable-left-addon-position\"\n            name=\"leftAddonPosition\"\n            label=\"Left Addon Position\"\n            value={leftAddonPosition}\n            onChange={(nextValue) => {\n              if (isAddonPosition(nextValue)) {\n                setLeftAddonPosition(nextValue);\n              }\n            }}\n            options={ADDON_POSITIONS}\n          />\n        </Grid>\n      </Fieldset>\n      <Fieldset legend=\"Right Addon Behavior\">\n        <Grid columns={2} phoneColumns={1}>\n          <Select\n            id=\"configurable-right-addon\"\n            name=\"rightAddon\"\n            label=\"Right Addon\"\n            labelKey=\"name\"\n            valueKey=\"value\"\n            value={rightAddon}\n            onChange={(nextValue) => {\n              if (isAddonType(nextValue)) {\n                setRightAddon(nextValue);\n              }\n            }}\n            options={ADDON_TYPE_OPTIONS}\n          />\n          <Select\n            id=\"configurable-right-addon-position\"\n            name=\"rightAddonPosition\"\n            label=\"Right Addon Position\"\n            value={rightAddonPosition}\n            onChange={(nextValue) => {\n              if (isAddonPosition(nextValue)) {\n                setRightAddonPosition(nextValue);\n              }\n            }}\n            options={ADDON_POSITIONS}\n          />\n        </Grid>\n      </Fieldset>\n    </Form>\n  );\n}\n"
  }
}
