@use "sass:color";
@use "sass:map";
@use "@react-md/core";

$disable-font: false !default;
$disable-svg: false !default;
$disable-dense: false !default;
$disable-spacing-before: false !default;
$disable-spacing-after: false !default;
$disable-spacing-above: false !default;
$disable-spacing-below: false !default;
$disable-rotator: false !default;
$disable-primary-color: false !default;
$disable-secondary-color: false !default;
$disable-warning-color: False !default;
$disable-error-color: false !default;
$disable-success-color: false !default;
$disable-hint-color: false !default;
$disable-disabled-color: false !default;

$light-theme-color: color.adjust(#000, $lightness: 46%) !default;
$dark-theme-color: color.adjust(#fff, $lightness: -30%) !default;

$color: if(
  core.$color-scheme == dark,
  $dark-theme-color,
  $light-theme-color
) !default;

$size: 1.5rem !default;
$dense-size: 1.25rem !default;

$spacing: 0.5rem !default;

$rotate-from: 0deg !default;
$rotate-to: 180deg !default;
$rotate-duration: core.$linear-duration !default;

$var-lookup: (
  color: (
    var: --rmd-icon-color,
    value: $color,
  ),
  size: (
    var: --rmd-icon-size,
    value: $size,
  ),
  spacing: (
    var: --rmd-icon-spacing,
    value: $spacing,
  ),
  rotate-from: (
    var: --rmd-icon-rotate-from,
    value: $rotate-from,
  ),
  rotate-to: (
    var: --rmd-icon-rotate-to,
    value: $rotate-to,
  ),
);

@function get-var($name, $fallback: null) {
  $found: core.validate($var-lookup, $name, "icon var");
  $var: map.get($found, var);
  $value: if($fallback, $fallback, map.get($found, value));

  @if $value {
    @return var(#{$var}, #{$value});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  $var: map.get(core.validate($var-lookup, $name, "icon var"), var);

  #{$var}: #{$value};
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin use-light-theme {
  @include set-var(color, $light-theme-color);
}

@mixin use-dark-theme {
  @include set-var(color, $dark-theme-color);
}

@mixin dense {
  @if $dense-size {
    @include set-var(size, $dense-size);
  }
}

@mixin styles {
  .rmd-icon {
    @include use-var(font-size, size);
    @include use-var(color);

    // you normally don't want icons to shrink in flex containers.
    // update the icon manually instead.
    flex-shrink: 0;
    user-select: none;

    @if not $disable-font {
      &--font {
        text-align: center;
      }
    }

    @if not $disable-svg {
      &--svg {
        fill: currentcolor;
        height: 1em;
        width: 1em;
      }
    }

    @if not $disable-spacing-before {
      &--before {
        @include core.auto-rtl(margin-right, get-var(spacing), 0);
      }
    }

    @if not $disable-spacing-after {
      &--after {
        @include core.auto-rtl(margin-left, get-var(spacing), 0);
      }
    }

    @if not $disable-spacing-above {
      &--above {
        @include use-var(margin-top, spacing);
      }
    }

    @if not $disable-spacing-below {
      &--below {
        @include use-var(margin-bottom, spacing);
      }
    }

    @if not $disable-primary-color {
      &--primary {
        @include set-var(color, core.get-theme-var(primary-color));
      }
    }

    @if not $disable-secondary-color {
      &--secondary {
        @include set-var(color, core.get-theme-var(secondary-color));
      }
    }

    @if not $disable-warning-color {
      &--warning {
        @include set-var(color, core.get-theme-var(warning-color));
      }
    }

    @if not $disable-error-color {
      &--error {
        @include set-var(color, core.get-theme-var(error-color));
      }
    }

    @if not $disable-success-color {
      &--success {
        @include set-var(color, core.get-theme-var(success-color));
      }
    }

    @if not $disable-hint-color {
      &--hint {
        @include set-var(color, core.get-theme-var(text-hint-color));
      }
    }

    @if not $disable-disabled-color {
      &--disabled {
        @include set-var(color, core.get-theme-var(text-disabled-color));
      }
    }

    @if not $disable-dense {
      &--dense {
        @include set-var(size, $dense-size);
      }
    }
  }

  @if core.$color-scheme == system {
    @media (prefers-color-scheme: dark) {
      :root {
        @include use-dark-theme;
      }
    }
  }

  @if not $disable-rotator {
    .rmd-icon-rotator {
      transform: rotate(get-var(rotate-from));
      // transform: rotate(var($rotate-from-var, $rotate-from));

      &--animate {
        transition: transform $rotate-duration linear;
      }

      &--rotated {
        transform: rotate(get-var(rotate-to));
        // transform: rotate(var($rotate-to-var, $rotate-to));
      }
    }
  }
}
