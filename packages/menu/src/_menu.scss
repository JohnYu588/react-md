@use "sass:map";
@use "@react-md/core";

$disable-menu: false !default;
$disable-menu-item: false !default;
$disable-menu-item-group: false !default;
$disable-focus-outline: false !default;
$disable-elevation-colors: core.$disable-dark-elevation !default;

$elevation: 8 !default;
$background-color: core.theme-get-var(surface-color) !default;
$color: core.theme-get-var(text-primary-color) !default;

$z-index: core.$temporary-element-z-index !default;
$min-width: 7rem !default;

$spacing: 1rem !default;

$var-lookup: (
  background-color: (
    var: --rmd-menu-background-color,
    value: $background-color,
  ),
  color: (
    var: --rmd-menu-color,
    value: $color,
  ),
  min-width: (
    var: --rmd-menu-min-width,
    value: $min-width,
  ),
  spacing: (
    var: --rmd-menu-spacing,
    value: $spacing,
  ),
);

@function get-var($name, $fallback: null) {
  $found: core.validate($var-lookup, $name, "dialog var");
  $var: map.get($found, var);
  $value: if($fallback, $fallback, map.get($found, value));

  @if $value {
    @return var(#{$var}, #{$value});
  }

  @return var(#{$var});
}

@mixin set-var($name, $value) {
  $var: map.get(core.validate($var-lookup, $name, "dialog var"), var);

  #{$var}: #{$value};
}

@mixin use-var($property, $name: $property, $fallback: null) {
  #{$property}: get-var($name, $fallback);
}

@mixin menu-styles {
  .rmd-menu {
    outline: none;
    overflow: auto;

    @if not $disable-focus-outline {
      @include core.keyboard-only {
        &--outline:focus {
          // Note: Do not use the `interaction-outline` mixin +
          // `interaction-set-var(core.$interaction-outline-color)` like normal focus
          // elements since it'll make all focusable children update with the
          // outline color as well
          outline: core.interaction-get-var(outline-color) solid
            core.interaction-get-var(outline-width);
        }
      }
    }

    &--elevated {
      @include core.box-shadow(
        $elevation,
        $disable-colors: $disable-elevation-colors
      );
      @if $disable-elevation-colors {
        @include use-var(background-color);
        @include use-var(color);
      }
      @include use-var(min-width);

      z-index: $z-index;
    }
  }
}

@mixin menu-item-styles {
  .rmd-menu-item {
    @include core.icon-set-var(spacing, get-var(spacing));

    height: var(--rmd-list-item-height);

    &--focused {
      @include core.keyboard-only {
        @include core.interaction-set-var(
          background-color,
          core.interaction-get-var(focus-background-color)
        );
        @include core.interaction-set-var(
          outline-color,
          core.$interaction-outline-color
        );
      }
    }
  }
}

@mixin menu-item-group-styles {
  .rmd-menu-item-group {
    padding: 0;
  }
}

@mixin styles {
  @if not $disable-menu {
    @include menu-styles;

    @if not $disable-menu-item {
      @include menu-item-styles;
    }

    @if not $disable-menu-item-group {
      @include menu-item-group-styles;
    }
  }
}
